// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Profile is a common stacktrace profile format.
//
// Measurements represented with this format should follow the
// following conventions:
//
// - Consumers should treat unset optional fields as if they had been
//   set with their default value.
//
// - When possible, measurements should be stored in "unsampled" form
//   that is most useful to humans.  There should be enough
//   information present to determine the original sampled values.
//
// - On-disk, the serialized proto must be gzip-compressed.
//
// - The profile is represented as a set of samples, where each sample
//   references a sequence of locations, and where each location belongs
//   to a mapping.
// - There is a N->1 relationship from sample.location_id entries to
//   locations. For every sample.location_id entry there must be a
//   unique Location with that id.
// - There is an optional N->1 relationship from locations to
//   mappings. For every nonzero Location.mapping_id there must be a
//   unique Mapping with that id.

syntax = "proto3";

package efficient;
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

message Profile {
  repeated Function functions = 1;
  repeated Label labels = 2;
  repeated LabelSet label_sets = 3;
  repeated Location locations = 4;
  repeated Mapping mappings = 5;
  repeated Observation observations = 6;
  repeated ValueType sample_types = 7;
  repeated StackTrace stack_traces = 8;
  repeated string strings = 9;
  google.protobuf.Timestamp start_time = 10;
  google.protobuf.Timestamp end_time = 11;
  google.protobuf.Duration duration = 12;
}

message Function {
  // Name of the function, in human-readable form if available.
  uint32 name = 1; // Index into string table
  // Name of the function, as identified by the system.
  // For instance, it can be a C++ mangled name.
  uint32 system_name = 2; // Index into string table
  // Source file containing the function.
  uint32 filename = 3; // Index into string table
  // Line number in source file.
  int64 start_line = 4;
}

message Label {
  uint32 key = 1;   // Index into string table

  // At most one of the following must be present
  uint32 str = 2;   // Index into string table
  int64 num = 3;

  // Should only be present when num is present.
  // Specifies the units of num.
  // Use arbitrary string (for example, "requests") as a custom count unit.
  // If no unit is specified, consumer may apply heuristic to deduce the unit.
  // Consumers may also  interpret units like "bytes" and "kilobytes" as memory
  // units and units like "seconds" and "nanoseconds" as time units,
  // and apply appropriate unit conversions to these.
  uint32 num_unit = 4;  // Index into string table
}

message LabelSet {
  repeated uint32 labels = 1; // index into label interned table
}

// Describes function and line table debug information.
message Location {
  // The id of the corresponding profile.Mapping for this location.
  // It can be unset if the mapping is unknown or not applicable for
  // this profile type.
  uint32 mapping_id = 1;
  // TODO Comment
  uint32 function_id = 2;
  // The instruction address for this location, if available.  It
  // should be within [Mapping.memory_start...Mapping.memory_limit]
  // for the corresponding mapping. A non-leaf address may be in the
  // middle of a call instruction. It is up to display tools to find
  // the beginning of the instruction if necessary.
  uint64 address = 3;
  // Multiple line indicates this location has inlined functions,
  // where the last entry represents the caller into which the
  // preceding entries were inlined.
  //
  // E.g., if memcpy() is inlined into printf:
  //    line[0].function_name == "memcpy"
  //    line[1].function_name == "printf"
  int64 line = 4;
}

message Mapping {
  // Address at which the binary (or DLL) is loaded into memory.
  uint64 memory_start = 1;
  // The limit of the address range occupied by this mapping.
  uint64 memory_limit = 2;
  // Offset in the binary that corresponds to the first mapped address.
  uint64 file_offset = 3;
  // The object this entry is loaded from.  This can be a filename on
  // disk for the main binary and shared libraries, or virtual
  // abstractions like "[vdso]".
  uint32 filename = 4;  // Index into string table
  // A string that uniquely identifies a particular program version
  // with high probability. E.g., for binaries generated by GNU tools,
  // it could be the contents of the .note.gnu.build-id field.
  uint32 build_id = 5;  // Index into string table
}

message Observation {
  Sample sample  = 1;
  int64 timestamp = 2;
  repeated int64 values = 3;
}

// Each Sample records values encountered in some program
// context. The program context is typically a stack trace, perhaps
// augmented with auxiliary information like the thread-id, some
// indicator of a higher level request being handled etc.
message Sample {
  uint32 labels = 1;
  uint32 stacktrace = 2;
}

message StackTrace {
  repeated uint32 locations = 1;
}

// ValueType describes the semantics and measurement units of a value.
message ValueType {
  uint32 type = 1; // Index into string table.
  uint32 unit = 2; // Index into string table.
}